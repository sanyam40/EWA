/* 

• Java Servlets is a technology used for generating dynamic web pages that runs on an Application/Web server.
• A Servlet acts as a middle layer between a request coming from the web browser and response generated by the web server.
• Using Java Servlets technology you can
• Collect input from users (through web forms)
• Retrieve records from a database (or any other source)
• Generate dynamic web pages (E.g. showing the current time)

• The javax.servlet and javax.servlet.http packages provide interfaces and classes for writing your own servlet programs.
• All servlets must implement the javax.servlet.Servlet interface which defines all servlet lifecycle methods (discussed later).
• The HttpServlet class provide methods such as doGet() and doPost() for handling HTTP specific services. 

--- Web App Architecture ---

• The Web consists of gazillions of clients (using browsers like Chrome, Firefox etc.) and servers (using web servers like Apache, NginX, Microsoft IIS etc.)
• All the client as well as server machines are connected through wired/wireless media.
• A client can request for a web application stored inside a web server. 

• Request & Response Model
I.The client sends a request that contains the name & address (URL) of the resource (HTML page) to the server.
II.The Server usually has lots of content (web pages) that it can send to the client (based on its request).
III.The Server’s response contains the actual document (HTML page) that the client requested.

• The HTTP protocol has several methods, but the most often used are:GET & POST.
• GET is a simple HTTP request that is used to get the resource at the requested URL.
• POST is a more powerful request which is used to request something & at the same time send form data to the server.
• Its like GET request with some extra info sent with the request. 

• GET V/S POST

1) GET : 
• In case of Get Reuest,Only limited mount of data can be sent because data is sent in header.
• Get request is not secured because data is exposed in url br.
• Get Request can be bookmarked.
• Get reuest is idempotent.It mens secured request will be ignored until response of first request is delivered.
• Get reuest is more efficient and used more than post.

2) POST : 
• In case of post request large amount of data can be sent because data is sent in body.
• Post request is secured because data isn't exposed in url bar.
• Post request can,t be bookmarked.
• Post request is non-idempotent.
• Post request is less efficient and used less than get.

--- Servlet Container --- 

• Servlets don’t have a main method, They’re under the control of another java application called Container.
• It is a system that manages Servlet components on top of the web server to handle the web client requests.
• When a web server application (like Apache) gets request for a servlet (a dynamic web page), the server hands the request not to the servlet itself, but to the Container in which the servlet is deployed.
• It’s the Container that calls the servlets methods like doPost() & doGet().
• E.g. Apache Tomcat, GlassFish, WildFly and many more...

• The servlet container is a part of web server that runs as a separate process.
• A container is classified into three types:
1) Standalone: Container is an integral part of the web server.
E.g. Tomcat running by itself.
2) In-process: Seperated from the web server but has the similar address space. 
E.g. Tomcat running inside JBoss.
3) Out-of-process: Seperated out from the web server having a different address space.

• A container handles all the low-level processing such as writing code for threading, providing security and networking.
• A container gives us :
1) Communications Support: don’t have to establish a socket connection.
2) Lifecycle Management: takes care of loading, instantiating and initializing servlets.
3) Multithreading Support: automatically creates a new java thread for every servlet request.
4) JSP Support: translating JSP code into real java code.

Q.How the container handles a request?
• Given are the 6 steps that suggests how a container handles the request coming from a client.
-- Step 1: User clicks a link that has a URL to a servlet instead of static HTML page.
-- Step 2: The container sees the request for a servlet, so it creates two objects. 
          A) HttpServletResponse
          B) HttpServletRequest
-- Step 3: The Container finds the correct servlet based on the URL in the request field.     
   •It creates a thread for that request and passes the request and response objects to the newly created servlet thread.
-- Step 4: The container calls the servlets service() method.
   • Depending on the type of request, the service() method calls either the doGet() or doPost() method (for e.g., HTTP GET).   
-- Step 5:  
   • The doGet() method generates the dynamic page and put it inside the response object  (Note: The container still got the reference to the response object). 
-- Step 6: 
   • The container converts the response object into HTTP Response and sends it back to the client. It finally deletes the request and response objects.

--- Servlets Life Cycle ---

• The life cycle of a servlet can be defined as the entire process from the creation of a servlet till its destruction.
• The Container is responsible for maintaining the life cycle of a servlet instance
• Three methods are mainly involved in the whole process
i) init()
ii) service()
iii) destroy()

• Following are the steps involved throughout the life cycle : 
i. The Container loads the Servlet class.
ii. Servlet instance is created (constructor runs).
iii. Call the init() method (called only once in life time, must complete before the service() method).
iv. Container calls the service() method (handles the client requests, doGet(), doPost() etc.).
v. Terminate the servlet by calling the destroy() method (make it available for garbage collection)

*/